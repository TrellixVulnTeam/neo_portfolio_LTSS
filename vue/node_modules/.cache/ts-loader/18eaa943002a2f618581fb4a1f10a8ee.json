{"remainingRequest":"/app/node_modules/babel-loader/lib/index.js!/app/node_modules/ts-loader/index.js??ref--14-2!/app/node_modules/eslint-loader/index.js??ref--13-0!/app/src/store/Post/actions.ts","dependencies":[{"path":"/app/src/store/Post/actions.ts","mtime":1608053815299},{"path":"/app/node_modules/cache-loader/dist/cjs.js","mtime":1607868701929},{"path":"/app/node_modules/babel-loader/lib/index.js","mtime":1607868701810},{"path":"/app/node_modules/ts-loader/index.js","mtime":1607868716978},{"path":"/app/node_modules/eslint-loader/index.js","mtime":1607868715874}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiL2FwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCBheGlvcyBmcm9tICJheGlvcyI7CnZhciBhY3Rpb25zID0gewogIGZldGNoUG9zdHM6IGZ1bmN0aW9uICgpIHsKICAgIHZhciBfZmV0Y2hQb3N0cyA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZShfcmVmLCBwb3N0cykgewogICAgICB2YXIgY29tbWl0OwogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgY29tbWl0ID0gX3JlZi5jb21taXQ7CiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDM7CiAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zLmdldChheGlvcy5kZWZhdWx0cy5iYXNlVVJMICsgInBvc3RzIikudGhlbihmdW5jdGlvbiAocmVzKSB7CiAgICAgICAgICAgICAgICBwb3N0cyA9IHJlcy5kYXRhLmRhdGE7CiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgY29tbWl0KCJmZXRjaFBvc3RzIiwgcG9zdHMpOwoKICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlKTsKICAgIH0pKTsKCiAgICBmdW5jdGlvbiBmZXRjaFBvc3RzKF94LCBfeDIpIHsKICAgICAgcmV0dXJuIF9mZXRjaFBvc3RzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICB9CgogICAgcmV0dXJuIGZldGNoUG9zdHM7CiAgfSgpCn07CmV4cG9ydCBkZWZhdWx0IGFjdGlvbnM7"},{"version":3,"sources":["/app/node_modules/eslint-loader/index.js??ref--13-0!/app/src/store/Post/actions.ts"],"names":[],"mappings":";;AAEA,OAAO,KAAP,MAAkB,OAAlB;AAEA,IAAM,OAAO,GAAsC;AACjD,EAAA,UAAU;AAAA,8EAAE,uBAAmB,KAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAS,cAAA,MAAT,QAAS,MAAT;AAAA;AAAA,qBACJ,KAAK,CAAC,GAAN,CAAU,KAAK,CAAC,QAAN,CAAe,OAAf,GAAyB,OAAnC,EAA4C,IAA5C,CAAiD,UAAA,GAAG,EAAG;AAC3D,gBAAA,KAAK,GAAG,GAAG,CAAC,IAAJ,CAAS,IAAjB;AACD,eAFK,CADI;;AAAA;AAIV,cAAA,MAAM,CAAC,YAAD,EAAe,KAAf,CAAN;;AAJU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AADuC,CAAnD;AASA,eAAe,OAAf","sourcesContent":["import { ActionTree } from \"vuex\";\nimport { PostsState, RootState, Post } from \"@/store/types\";\nimport axios from \"axios\";\n\nconst actions: ActionTree<PostsState, RootState> = {\n  fetchPosts: async ({ commit }, posts: Post[]) => {\n    await axios.get(axios.defaults.baseURL + \"posts\").then(res => {\n      posts = res.data.data;\n    });\n    commit(\"fetchPosts\", posts);\n  }\n};\n\nexport default actions;\n"],"sourceRoot":""}]}